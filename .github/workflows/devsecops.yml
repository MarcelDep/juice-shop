name: DevSecOps Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  devsecops:
    runs-on: ubuntu-latest

    services:
      docker:
        image: docker:dind
        options: --privileged
        ports:
          - 2375:2375

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Docker client to talk to Docker-in-Docker
      run: echo "DOCKER_HOST=tcp://localhost:2375" >> $GITHUB_ENV

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '22'

    # SCA - npm audit
    - name: Install dependencies
      run: npm ci

    - name: Run npm audit
      run: npm audit --json > audit-report.json || true

    - name: Check High/Critical vulns in npm audit
      run: |
        sudo apt-get update && sudo apt-get install -y jq
        vulnerabilities=$(jq '[.vulnerabilities[]? | select(.severity=="high" or .severity=="critical")] | length' audit-report.json)
        echo "High/Critical vulnerabilities found: $vulnerabilities"
        if [ "$vulnerabilities" -ge 2 ]; then
          echo "Found 2 or more high/critical vulnerabilities - continuing build"
        fi

    - name: Upload npm audit report
      uses: actions/upload-artifact@v4
      with:
        name: npm-audit-report
        path: audit-report.json

    # SAST - Semgrep
    - name: Install Semgrep
      run: pip install --upgrade semgrep

    - name: Run Semgrep
      run: semgrep --config=p/owasp-top-ten --json --output=semgrep-report.json || true

    - name: Upload Semgrep report
      uses: actions/upload-artifact@v4
      with:
        name: semgrep-report
        path: semgrep-report.json

    # Secrets scan - Gitleaks
    - name: Install Gitleaks
      run: |
        curl -sSL https://github.com/gitleaks/gitleaks/releases/download/v8.17.0/gitleaks_8.17.0_linux_x64.tar.gz -o gitleaks.tar.gz
        tar -xvf gitleaks.tar.gz gitleaks
        chmod +x gitleaks
        sudo mv gitleaks /usr/local/bin/
        gitleaks version

    - name: Run Gitleaks
      run: |
        gitleaks detect --source . --verbose --report-format json --report-path gitleaks-report.json || true

    - name: Upload Gitleaks report
      uses: actions/upload-artifact@v4
      with:
        name: gitleaks-report
        path: gitleaks-report.json

    # Build Docker image
    - name: Build Juice Shop Docker image
      run: docker build -t juice-shop:local .

    # Run container on port 3000
    - name: Run Juice Shop container on port 3000
      run: docker run -d -p 3000:3000 --name juice-shop-container juice-shop:local

    # (Opcjonalnie) delay for app startup, np. 10s
    - name: Wait for app to start
      run: sleep 10

    # Trivy scan
    - name: Install Trivy
      run: |
        sudo apt-get update && sudo apt-get install -y curl
        curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin

    - name: Scan image with Trivy
      run: trivy image --severity HIGH,CRITICAL --format table --output trivy-report.txt juice-shop:local || true

    - name: Upload Trivy report
      uses: actions/upload-artifact@v4
      with:
        name: trivy-report
        path: trivy-report.txt

    # Stop and remove container after all tests
    - name: Stop and remove Juice Shop container
      if: always()
      run: |
        docker stop juice-shop-container || true
        docker rm juice-shop-container || true

