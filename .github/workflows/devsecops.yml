name: DevSecOps Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  devsecops:
    runs-on: ubuntu-latest
    services:
      docker:
        image: docker:20.10.16-dind
        options: --privileged

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Build tools Docker image
      run: docker build -t devsecops-tools:latest .

    - name: Install Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '22'

    - name: Install dependencies
      run: npm install

    # Npm audit using host runner
    - name: Run npm audit
      run: npm audit --json > audit-report.json || true

    - name: Check High/Critical vulnerabilities in npm audit
      run: |
        sudo apt-get update && sudo apt-get install -y jq
        cat audit-report.json
        vulnerabilities=$(jq '[.vulnerabilities[]? | select(.severity=="high" or .severity=="critical")] | length' audit-report.json)
        echo "High/Critical vulnerabilities found: $vulnerabilities"
        if [ "$vulnerabilities" -ge 2 ]; then
          echo "Found 2 or more high/critical vulnerabilities - continuing build"
        fi

    - name: Upload npm audit report
      uses: actions/upload-artifact@v4
      with:
        name: npm-audit-report
        path: audit-report.json

    # Run Semgrep inside container
    - name: Run Semgrep scan
      run: |
        docker run --rm -v ${{ github.workspace }}:/src -w /src devsecops-tools:latest semgrep --config=p/owasp-nodejs

    # Run Gitleaks inside container
    - name: Run Gitleaks scan
      run: |
        docker run --rm -v ${{ github.workspace }}:/src -w /src devsecops-tools:latest gitleaks detect --verbose --report-format json --report-path gitleaks-report.json || true

    - name: Upload Gitleaks report
      uses: actions/upload-artifact@v4
      with:
        name: gitleaks-report
        path: gitleaks-report.json

    # Build Juice Shop Docker image
    - name: Build Juice Shop Docker image
      run: docker build -t juice-shop:latest .

    # Scan Juice Shop image with Trivy (assuming Trivy jest zainstalowany w devsecops-tools)
    - name: Scan Docker image with Trivy
      run: |
        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock devsecops-tools:latest trivy image --severity HIGH,CRITICAL --format table --output trivy-report.txt juice-shop:latest || true

    - name: Upload Trivy report
      uses: actions/upload-artifact@v4
      with:
        name: trivy-report
        path: trivy-report.txt

    # Setup Docker network
    - name: Setup Docker network
      run: docker network create zapnet || true

    # Run Juice Shop container
    - name: Run Juice Shop container
      run: |
        docker rm -f juice-shop-test || true
        docker run -d --network zapnet --name juice-shop-test juice-shop:latest
        sleep 25

    # Create ZAP reports directory
    - name: Create reports directory
      run: mkdir -p ${{ github.workspace }}/zap-reports

    # Run OWASP ZAP Baseline Scan (w dedykowanym kontenerze ZAP, do sieci zapnet)
    - name: Run OWASP ZAP Baseline Scan
      run: |
        docker run --rm --network zapnet \
          -v ${{ github.workspace }}/zap-reports:/zap/wrk:rw \
          ghcr.io/zaproxy/zaproxy:stable \
          zap-baseline.py -t http://juice-shop-test:3000 \
          -J /zap/wrk/report_json.json \
          -w /zap/wrk/report_md.md \
          -r /zap/wrk/report_html.html || true

    - name: Upload ZAP reports
      uses: actions/upload-artifact@v4
      with:
        name: zap-reports
        path: zap-reports/
